# -*- coding: utf-8 -*-
"""Natural Language Database Code assistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W7BZlkjuXrC_bm_BHvnySaQrW8E19KbC
"""

import pandas as pd
!pip install sqlalchemy # to interact pandas with sql

from google.colab import drive
drive.mount('/gdrive')

import os
os.getcwd()
# os.chdir('/gdrive/My Drive/LLM/')

#flow
#csv --> sql RAM--> sql -- > results

os.getcwd()

os.chdir('/gdrive/My Drive/LLM/05-Lab-NLP-Database-Assistant')

os.getcwd()

df = pd.read_csv('penguins.csv')

df.head()

from sqlalchemy import create_engine, text # here text will allow us to go from string to SQL query which then turn will be used by LLM

#create temporary database
# create_engine = #create engine is a genralized function call to connect SQL database

temp_db = create_engine('sqlite:///:memory:',echo=True)

data = df.to_sql(name = 'penguins', con = temp_db) # Give any name of sql table as 'penguins',con = temp_db means connecting to temprary database called 'temp_db'

"""# In above, sql table is created with csv file"""

#connect with sql database
with temp_db.connect() as conn:
  result = conn.execute(text('select * from penguins') ) #inside text we have sql command known to a sql developer.

# result.all()

"""Now, we will use LLM to query to SQL. The query will be in simple text.No, developer required to put sql complex query.
 But we need to give some information eg. strcture of table being queried like table name..
"""

# NLP -> SQL -> CONTEXT -> SELECT col_name FROM table_name properties

df.info()

"""We will give this info in context to LLM to know about the table property."""

def create_prefix(query):  # in 'query' we will put actual NLP query
  #query = input("What is your question about pengiuine table")
  prefix = f""" Return a SQL statement that answers the following query:
  {query}
  For a table called 'penguins' with follwoing properties:

    #   Column             Non-Null Count  Dtype
  ---  ------             --------------  -----
  0   species            344 non-null    object
  1   island             344 non-null    object
  2   bill_length_mm     342 non-null    float64
  3   bill_depth_mm      342 non-null    float64
  4   flipper_length_mm  342 non-null    float64
  5   body_mass_g        342 non-null    float64
  6   sex                333 non-null    object

  Example rows :
  (0, 'Adelie', 'Torgersen', 39.1, 18.7, 181.0, 3750.0, 'MALE'),
  (1, 'Adelie', 'Torgersen', 39.5, 17.4, 186.0, 3800.0, 'FEMALE')

  only return SQL statement for the query

  """
  return prefix

def user_input():
  query = input("ASk a question about the pengiuine table ")
  return(create_prefix(query))

prefix = user_input() # This is just setting context to code model so that it provides sql statement for query given by NLP.

print(prefix)

import vertexai
vertexai.init(project="openaiprojectkk1", location="us-central1") # provide a project ID which is already created
from vertexai.language_models import CodeGenerationModel

#authenticate google colab to use your credentials
from google.colab import auth as google_auth
google_auth.authenticate_user()

CodeGen = CodeGenerationModel.from_pretrained('code-bison')

print("Hellow there ! I am your AI assistant")
print('\n\n')
prefix = user_input()
result = CodeGen.predict(prefix = prefix)

result

result.text

"""#new lines are also there in sql query genrated.This has to be cleaned.

sql statement generated by AI assistant is having quotes and will give error while we execute. So, lets write clean up function to clean the sql code.
"""

type(result)

type(result.text)

def cleansqlcode(sql_statement):
  return sql_statement.replace('```sql','').replace('```','').replace('\n',' ')

cleansqlcode(result.text)



"""how many penguins are there"

# Lets combine all above code in nice consize code
"""

def aiassistant():
  print("Hello there ! I am your AI assistant")
  print('\n\n')
  prefix = user_input()
  result = CodeGen.predict(prefix = prefix)
  sql = cleansqlcode(result.text)#connect with sql database
  with temp_db.connect() as conn:
    print("lets run this sql command")
    result = conn.execute(text(sql))
  print("\n\n-----------------------------------------------------------------------------")
  print("Here are your results:")
  print(result.all())

aiassistant()

aiassistant()

aiassistant()

